1. 线程可以理解成是在进程中独立运行的子任务，所以使用多线程技术后可以在同一个时间内运行更多不同种类的任务。

2. 单任务的特点就是排队执行，也就是同步，就像在cmd中输入一条命令，必需等待这条命令执行完成才可以执行下一条命令，所以使用多线程也就是在使用异步。

3. 多线程是异步的，所以千万不要把编程工具里代码的顺序当成线程执行的顺序，线程被调用的时机是随机的。

4. 实现多线程编程的方式主要有两种，一种是继承Thread类，另一种是实现Runnable接口。

5. 从源代码中可以发现Thread类实现了Runnable接口，他们之间具有多态的关系。

6. Thread类中start();方法和run方法的区别。

7. Thread.java也实现了Runnable接口

8. 构造函数Thread(Runnable target)不仅可以传Runnable接口对象，还可以传入一个Thread类的对象，这样做完全可以将一个Thread对象中的run方法交给其他的线程来调用。

9. 自定义线程类中的实例变量针对其他线程可以有共享和不共享之分。

10. synchronized 关键字

11. 线程安全和非线程安全

12. 非线程安全主要是指：多个线程多同一个对象中的同一个实例变量进行操作时会出现值被更改、值不同步的情况。

13. i--与System.out.println()的异常

14. Thread.currentThread()方法可以返回代码正在被哪个线程调用的信息，Thread.currentThread().getName();

15. 方法isAlive();的功能是判断当前线程是否处于活动状态。

16. 方法sleep();是在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），这个正在执行的线程是指this.currentThread()返回的线程。

17. 方法getId();方法的作用是取得线程的唯一标识

18. 停止线程：停止一个线程意味着在线程处理完成任务之前停掉正在做的操作，也就是放弃当前的操作。

19. 停止一个线程可以用Thread.stop();方法，但是最好不要用它虽然它确实可以停止一个正在运行的线程，但是这个方法是不安全的，而且是已经作废的。

20. 大多数停止一个线程的的操作方法是Thread.interrupt();,尽管这个方法的名称是 停止 终止 的意思，但这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。

21. 在Java中有三种方法可以终止正在运行的线程：
    1. 使用退出标识，使线程正常退出，也就是当run方法完成后线程终止。
    2. 使用stop方法强行终止线程，但是不推荐使用这个方法，stop是过期的方法，且是不安全的方法。
    3. 使用interrupt方法中断线程。
