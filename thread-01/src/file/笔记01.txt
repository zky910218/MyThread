1. 线程可以理解成是在进程中独立运行的子任务，所以使用多线程技术后可以在同一个时间内运行更多不同种类的任务。

2. 单任务的特点就是排队执行，也就是同步，就像在cmd中输入一条命令，必需等待这条命令执行完成才可以执行下一条命令，所以使用多线程也就是在使用异步。

3. 多线程是异步的，所以千万不要把编程工具里代码的顺序当成线程执行的顺序，线程被调用的时机是随机的。

4. 实现多线程编程的方式主要有两种，一种是继承Thread类，另一种是实现Runnable接口。

5. 从源代码中可以发现Thread类实现了Runnable接口，他们之间具有多态的关系。

6. Thread类中start();方法和run方法的区别。

7. Thread.java也实现了Runnable接口

8. 构造函数Thread(Runnable target)不仅可以传Runnable接口对象，还可以传入一个Thread类的对象，这样做完全可以将一个Thread对象中的run方法交给其他的线程来调用。

9. 自定义线程类中的实例变量针对其他线程可以有共享和不共享之分。

10. synchronized 关键字

11. 线程安全和非线程安全

12. 非线程安全主要是指：多个线程多同一个对象中的同一个实例变量进行操作时会出现值被更改、值不同步的情况。

13. i--与System.out.println()的异常

14. Thread.currentThread()方法可以返回代码正在被哪个线程调用的信息，Thread.currentThread().getName();

15. 方法isAlive();的功能是判断当前线程是否处于活动状态。

16. 方法sleep();是在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），这个正在执行的线程是指this.currentThread()返回的线程。

17. 方法getId();方法的作用是取得线程的唯一标识

18. 停止线程：停止一个线程意味着在线程处理完成任务之前停掉正在做的操作，也就是放弃当前的操作。

19. 停止一个线程可以用Thread.stop();方法，但是最好不要用它虽然它确实可以停止一个正在运行的线程，但是这个方法是不安全的，而且是已经作废的。

20. 大多数停止一个线程的的操作方法是Thread.interrupt();,尽管这个方法的名称是 停止 终止 的意思，但这个方法不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。

21. 在Java中有三种方法可以终止正在运行的线程：
    1. 使用退出标识，使线程正常退出，也就是当run方法完成后线程终止。
    2. 使用stop方法强行终止线程，但是不推荐使用这个方法，stop是过期的方法，且是不安全的方法。
    3. 使用interrupt方法中断线程。

22. this.interrupted() 测试当前线程是否已经中断，执行后具有将状态标识清楚为false的功能。

23. this.isInterrupted() 测试线程是否已经中断， 但是不清楚状态标识。

24. 停止线程的方法：异常法、沉睡法、暴力停止（stop方法，调用此方法时会抛出异常：java.lang.ThreadDeath, 此异常不需要显示的进行捕捉）

25. 使用return停止线程，将方法interrupt与return结合起来使用也能实现停止线程的效果。

26. 总的来说还是建议使用抛异常的方式来实现线程的停止，因为在catch块中还可以将异常向上抛出，使线程停止的事件得以传播。

27. 暂停线程意味着此线程还可以恢复运行，在Java多线程中，可以使用suspend()方法暂停线程，使用resume()方法恢复线程。

28. suspend和resume方法的缺点是容易造成线程独占、不同步。

29. 在使用suspend和resume方法时很容易出现因程序暂停而导致数据不同步的情况。

30. yield()方法的作用是放弃当前的cpu资源，将它让给其他的任务去占用cpu执行时间，但是放弃的时间不确定，有可能刚刚放弃，又马上获得了CPU时间片。

31. 线程的优先级，在Java中线程的优先级分为10级（1-10），如果大于10或者小于1，则JDK抛出异常：throw new IllegalArgumentException()

32. JDK中使用3个常量来预置定义优先级的值：
    public final static int MIN_PRIORITY = 1;
    public final static int NORM_PRIORITY = 5;
    public final static int MAX_PRIORITY = 10;

33. 在Java中线程的优先级具有继承性，比如A线程启动B线程，则B线程的优先级与A是一样的。setPriority(int i);  设置线程的优先级

34. 线程优先级具有规则性

35 线程的优先级具有随机性

36. 在Java中有两种线程：用户线程、守护线程

37. 守护线程是一种特殊的线程，它的特性有“陪伴”的含义，当进程中不存在非守护线程了，则守护线程自动销毁。典型的守护线程就是垃圾回收线程，当进程中没有非守护线程了，
则垃圾回收线程也就没有存在的必要了，自动销毁。

=======end 线程基础知识 2018.05.31 @冰烆


